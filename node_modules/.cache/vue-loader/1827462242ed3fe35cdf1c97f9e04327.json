{"remainingRequest":"C:\\Users\\jessica\\Documents\\git\\vue-test\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessica\\Documents\\git\\vue-test\\src\\pages\\test.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\jessica\\Documents\\git\\vue-test\\src\\pages\\test.vue","mtime":1545833417545},{"path":"C:\\Users\\jessica\\Documents\\git\\vue-test\\node_modules\\css-loader\\index.js","mtime":1545311098453},{"path":"C:\\Users\\jessica\\Documents\\git\\vue-test\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1545311099620},{"path":"C:\\Users\\jessica\\Documents\\git\\vue-test\\node_modules\\postcss-loader\\src\\index.js","mtime":1545311099406},{"path":"C:\\Users\\jessica\\Documents\\git\\vue-test\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1545311097356},{"path":"C:\\Users\\jessica\\Documents\\git\\vue-test\\node_modules\\vue-loader\\lib\\index.js","mtime":1545311099620}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.w-240 {\n    width: 240px;\n}\n",{"version":3,"sources":["test.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2FA;AACA;AACA","file":"test.vue","sourceRoot":"src\\pages","sourcesContent":["<template>\r\n    <div>\r\n        <p><code>query: {{ query }}</code></p>\r\n        <datatable v-bind=\"$data\">\r\n            <button class=\"btn btn-default\" @click=\"alertSelectedUids\" :disabled=\"!selection.length\">\r\n                <i class=\"fa fa-commenting-o\"></i>\r\n                Alert selected uid(s)\r\n            </button>\r\n        </datatable>\r\n    </div>\r\n</template>\r\n<script>\r\n    import DataSource from \"../data/datasource\";\r\n    // import mockData from '../_mockData'\r\n    // import components from '../components';\r\n    export default {\r\n        name: 'FriendsTable', // `name` is required as a recursive component\r\n        props: ['row'], // from the parent FriendsTable (if exists)\r\n        data () {\r\n            const amINestedComp = !!this.row\r\n            return {\r\n                supportBackup: true,\r\n                supportNested: true,\r\n                tblClass: 'table-bordered',\r\n                tblStyle: 'color: #666',\r\n                pageSizeOptions: [5, 10, 15, 20],\r\n                columns: (() => {\r\n                    const cols = [\r\n                        { title: 'UID', field: 'uid', label: 'User ID', sortable: true, visible: 'true' },\r\n                        { title: 'Email', field: 'email', visible: false, thComp: 'FilterTh', tdComp: 'Email' },\r\n                        { title: 'Username', field: 'name', thComp: 'FilterTh', tdStyle: { fontStyle: 'italic' } },\r\n                        { title: 'Country', field: 'country', thComp: 'FilterTh', thStyle: { fontWeight: 'normal' } },\r\n                        { title: 'IP', field: 'ip', visible: false, tdComp: 'IP' },\r\n                        { title: 'Age', field: 'age', sortable: true, thClass: 'text-info', tdClass: 'text-success' },\r\n                        { title: 'Create time', field: 'createTime', sortable: true, colClass: 'w-240', thComp: 'CreatetimeTh', tdComp: 'CreatetimeTd' },\r\n                        { title: 'Color', field: 'color', explain: 'Favorite color', visible: false, tdComp: 'Color' },\r\n                        { title: 'Language', field: 'lang', visible: false, thComp: 'FilterTh' },\r\n                        { title: 'PL', field: 'programLang', explain: 'Programming Language', visible: false, thComp: 'FilterTh' },\r\n                        { title: 'Operation', tdComp: 'Opt', visible: 'true' }\r\n                    ]\r\n                    const groupsDef = {\r\n                        Normal: ['Email', 'Username', 'Country', 'IP'],\r\n                        Sortable: ['UID', 'Age', 'Create time'],\r\n                        Extra: ['Operation', 'Color', 'Language', 'PL']\r\n                    }\r\n                    return cols.map(col => {\r\n                        Object.keys(groupsDef).forEach(groupName => {\r\n                            if (groupsDef[groupName].includes(col.title)) {\r\n                                col.group = groupName\r\n                            }\r\n                        })\r\n                        return col\r\n                    })\r\n                })(),\r\n                data: [],\r\n                total: 0,\r\n                selection: [],\r\n                summary: {},\r\n                // `query` will be initialized to `{ limit: 10, offset: 0, sort: '', order: '' }` by default\r\n                // other query conditions should be either declared explicitly in the following or set with `Vue.set / $vm.$set` manually later\r\n                // otherwise, the new added properties would not be reactive\r\n                query: amINestedComp ? { uid: this.row.friends } : {},\r\n                // any other staff that you want to pass to dynamic components (thComp / tdComp / nested components)\r\n                xprops: {\r\n                    eventbus: new Vue()\r\n                }\r\n            }\r\n        },\r\n        watch: {\r\n            query: {\r\n                handler () {\r\n                    this.handleQueryChange()\r\n                },\r\n                deep: true\r\n            }\r\n        },\r\n        methods: {\r\n            handleQueryChange () {\r\n                DataSource(this.query).then(({ rows, total, summary }) => {\r\n                    this.data = rows\r\n                    this.total = total\r\n                    this.summary = summary\r\n                })\r\n            },\r\n            alertSelectedUids () {\r\n                alert(this.selection.map(({ uid }) => uid))\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n    .w-240 {\r\n        width: 240px;\r\n    }\r\n</style>"]}]}