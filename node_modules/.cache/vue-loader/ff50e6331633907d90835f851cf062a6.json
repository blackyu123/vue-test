{"remainingRequest":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\ClassManagement.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\src\\pages\\ClassManagement.vue","mtime":1557851130751},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552619058231},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\babel-loader\\lib\\index.js","mtime":1552619052419},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1552619058231},{"path":"C:\\Users\\jessi\\Documents\\git\\vue-test\\node_modules\\@vue\\cli-service\\node_modules\\vue-loader\\lib\\index.js","mtime":1552619058571}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport DataSource from \"../data/datasource\";\n\nexport default {\n    name: \"ClassManagement\",\n    async created() {\n        //await this.getClass();\n        await this.getParentClassList();\n        await this.getLevel();\n        await this.getAcademicYear();\n        await this.getClassType();\n        await this.getClassTeacher();\n    },\n    data() {\n        return {\n            currentClassProgs: [],\n            assignClassModal: false,\n            newClassShowModal: false,\n            editClassShowModal: false,\n            newProgrammeShowModal: false,\n            ClassListModal: false,\n            ViewClassModal: false,\n            showbackBtn: false,\n            ddlClassLevel: '',\n            ddlSemester: '',\n            inputClassName: '',\n            ddlClassType: '',\n            ddlClassTeacher: '',\n            inputMaxStudents: '',\n            ddlEditClassStatus: '',\n            inputEditClassName: '',\n            inputEditMaxStudents: '',\n            inputeditLevel: '',\n            assignClassLevelID: '',\n            assignClassID: '',\n            classListSemesterID: '',\n            classListCourseID: '',\n            classListClassName: '',\n            classListLevelName: '',\n            classListMaxStudents: '',\n            programmeLevelID: '',\n            programmeSemID: '',\n            programmeClassName: '',\n            programmeMaxStudent: '',\n            programmeClassTeacher: '',\n            programmeSaveType: '',\n            editSemesterID: '',\n            editCourseID: '',\n            editClassName: '',\n            assignStudentsListSearchFilter: '',\n\n            levelList: [],\n            semesterList: [],\n            classTypeList: [],\n            currentClassTypeList: [],\n            classTeacherList: [],\n            classListInt: [],\n            classListFilteritem: [],\n            editClassStatusList: ['Active', 'Closed'],\n            assignStudentsListInt: [],\n\n\n            classList: [{\n                prop: \"CLS_ClassName\",\n                label: \"Class Name\"\n            }, {\n                prop: \"CLS_Batch\",\n                label: \"Programme\"\n            }, {\n                prop: \"CLS_Class_Max_Students\",\n                label: \"Max Students\"\n            }, {\n                prop: \"CRS_Course_Name\",\n                label: \"Level\"\n            }],\n            // classListAction: {\n            //     label: 'Edit',\n            //     props: {\n            //         align: 'center',\n            //     },\n            //     buttons: [{\n            //         props: {\n            //             type: 'primary',\n            //             icon: 'el-icon-edit'\n            //         },\n            //         handler: row => {\n            //             this.inputEditClassName = row.CLS_ClassName;\n            //             this.ddlEditClassStatus = 'Active';\n            //             this.inputEditMaxStudents = row.CLS_Class_Max_Students;\n            //             this.inputeditLevel = row.CRS_Course_Name;\n            //             this.$refs.editClassShowModal.show();\n            //         },\n            //         label: 'Edit'\n            //     }]\n            // },\n\n\n            multipleSelection: [],\n            assignStudentsListCurrentPage: 1,\n            assignStudentsListPageSize: 20,\n            assignStudentsListTotal: 0,\n            assignStudentsList: [{\n                prop: \"Index_No\",\n                label: \"Student ID\"\n            }, {\n                prop: \"Full_Name\",\n                label: \"First Name\"\n            }, {\n                prop: \"Middle_name\",\n                label: \"Middle Name\"\n            }, {\n                prop: \"Last_name\",\n                label: \"Last Name\"\n            },\n                //     {\n                //     prop: \"assignToCurrentClass\",\n                //     label: \"Assigned Current Class\"\n                // }\n            ],\n            ClassFilters: [\n                {\n                    value: '',\n                    prop: 'CLS_ClassName',\n                },\n                {\n                    value: [],\n                    prop: 'CRS_Course_Name'\n                }],\n            // filters: [{\n            //     value: '',\n            //     prop: 'Full_Name',\n            // }],\n\n\n            currentStudent: [],\n            currentStudentList: [{\n                prop: \"Index_No\",\n                label: \"Student ID\"\n            }, {\n                prop: \"Full_Name\",\n                label: \"First Name\"\n            }, {\n                prop: \"Middle_name\",\n                label: \"Middle Name\"\n            }, {\n                prop: \"Last_name\",\n                label: \"Last Name\"\n            }],\n            tempRow: \"\",\n\n\n            parentClassListInt: [],\n            parentClassList: [{\n                prop: \"CLS_ClassName\",\n                label: \"Class Name\"\n            }, {\n                prop: \"Average_MaxStudents\",\n                label: \"Max Students\"\n            }, {\n                prop: \"CRS_Course_Name\",\n                label: \"Level\"\n            }, {\n                prop: \"SMT_Year\",\n                label: \"Year\"\n            }],\n            parentClassListAction: {\n                label: 'Edit',\n                props: {\n                    align: 'center',\n                },\n                buttons: [{\n                    props: {\n                        type: 'primary',\n                        icon: 'el-icon-edit'\n                    },\n                    handler: row => {\n                        this.classListSemesterID = row.CLS_FK_Semester_ID;\n                        this.classListCourseID = row.CLS_FK_Course_ID;\n                        this.classListClassName = row.CLS_ClassName;\n                        this.classListLevelName = row.CRS_Course_Name;\n                        this.classListMaxStudents = row.Average_MaxStudents;\n                        this.getClass();\n                        this.$refs.classListShowModal.show();\n                        this.showbackBtn = true;\n                    },\n                    label: 'Edit'\n                }]\n            },\n        };\n    },\n    methods: {\n        getRowKey(row) {\n            return row.Student_ID;\n        },\n        changeSelection(val) {\n            this.multipleSelection = val;\n        },\n        backtoClassList() {\n            this.$refs.classListShowModal.show();\n        },\n        async getParentClassList() {\n            try {\n                const response = await DataSource.shared.getParentClassList('', 'GET CLASS LIST GROUP BY LEVEL, SEMESTER, SCHOOL AND CLASS NAME');\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else if (response.code === '99') {\n                        console.log('Error! getParentClassList');\n                    } else {\n                        this.parentClassListInt = response.Table;\n                        this.parentClassListInt.forEach(object => {\n                            const foundLevel = this.classListFilteritem.find(d => d === object.CRS_Course_Name);\n                            if (!foundLevel) {\n                                this.classListFilteritem.push(object.CRS_Course_Name);\n                            }\n                        });\n                    }\n                }\n\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async getClass() {\n            try {\n                const response = await DataSource.shared.getClass('');\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.classListInt = response.Table;\n                        // this.classListInt.forEach(object => {\n                        //     const found = this.classListFilteritem.find(d => d === object.CLS_Batch);\n                        //     if (!found) {\n                        //         this.classListFilteritem.push(object.CLS_Batch);\n                        //     }\n                        //     const foundLevel = this.classListFilteritem.find(d => d === object.CRS_Course_Name);\n                        //     if (!foundLevel) {\n                        //         this.classListFilteritem.push(object.CRS_Course_Name);\n                        //     }\n                        // });\n\n\n                        let classListList = response.Table;\n                        this.classListInt = classListList.filter(d => {\n                            return d.CLS_FK_Semester_ID === this.classListSemesterID && d.CLS_FK_Course_ID === this.classListCourseID && d.CLS_ClassName === this.classListClassName;\n                        });\n\n\n                        this.currentClassProgs = this.classListInt.map(d => d.CLS_Batch);\n\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async getLevel() {\n            try {\n                const response = await DataSource.shared.getLevel('');\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.levelList = response.Table;\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async getAcademicYear() {\n            try {\n                const response = await DataSource.shared.getAcademicYear('');\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.semesterList = response.Table;\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async getClassType() {\n            try {\n                const response = await DataSource.shared.getClassType('');\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.classTypeList = response.Table;\n                        //\n                        // this.classTypeList = this.classTypeList.filter(d => d.ID !== fileId);\n                        //\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async getClassTeacher() {\n            try {\n                const response = await DataSource.shared.getTeacherListBySchool();\n                if (response) {\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        this.classTeacherList = response.Table;\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        onlyNumber($event) {\n            //console.log($event.keyCode); //keyCodes value\n            let keyCode = ($event.keyCode ? $event.keyCode : $event.which);\n            //if ((keyCode < 48 || keyCode > 57) && keyCode !== 46) { // 46 is dot\n            if (keyCode < 48 || keyCode > 57) { // 46 is dot\n                $event.preventDefault();\n            }\n        },\n        async saveClass() {\n            try {\n                if (this.programmeLevelID === '' || this.programmeSemID === '' || this.ddlClassType === '' || this.programmeClassName === '' || this.programmeMaxStudent === '' || this.programmeClassTeacher === '' || this.programmeSaveType === '') {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Please fill in all information'\n                    });\n                } else {\n                    const response = await DataSource.shared.saveClass(this.programmeLevelID, this.programmeSemID, this.ddlClassType, this.programmeClassName, this.programmeMaxStudent, this.programmeClassTeacher, this.programmeSaveType);\n                    if (response) {\n                        if (response.code === '88') {\n                            window.location.replace('/');\n                        } else if (response.code === '99') {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: 'Save Class Error!'\n                            });\n                        } else if (response.code === '2') {\n                            this.$notify.error({\n                                title: 'Duplicated',\n                                message: 'Duplicated Class with programme!'\n                            });\n                        } else {\n                            this.$notify({\n                                title: 'Success',\n                                message: 'Successfully Saved!',\n                                type: 'success'\n                            });\n                            window.location.replace('/ClassManagement');\n                        }\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async updateClass() {\n            try {\n                if (this.editSemesterID === '' || this.editCourseID === '' || this.editClassName === '') {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Please close and open again'\n                    });\n                } else if (this.inputEditClassName === '' || this.ddlEditClassStatus === '' || this.inputEditMaxStudents === '') {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Please fill in all information'\n                    });\n                } else {\n                    const response = await DataSource.shared.updateClass(this.ddlEditClassStatus, this.inputEditClassName, this.inputEditMaxStudents, this.editClassName, this.editCourseID, this.editSemesterID);\n                    if (response) {\n                        if (response.code === '88') {\n                            window.location.replace('/');\n                        } else if (response.code === '99') {\n                            this.$notify.error({\n                                title: 'Error',\n                                message: 'Edit Class Error!'\n                            });\n                        } else {\n                            this.$notify({\n                                title: 'Success',\n                                message: 'Successfully Edited!',\n                                type: 'success'\n                            });\n                            this.getParentClassList();\n                            this.closeAssignModal();\n                        }\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        directToPromotion() {\n            window.location.replace('/Promotion');\n        },\n        assignStudentToClass(row) {\n            return [{\n                name: 'Assign',\n                handler: _ => {\n                    this.assignClassLevelID = row.PK_Course_ID;\n                    this.assignClassID = row.PK_Class_ID;\n                    this.getAssignStudents();\n                    // this.$refs.assignClassShowModal.show();\n                    this.assignClassModal = true;\n                    this.tempRow = row;\n                }\n            }];\n        },\n        closeAssignModal() {\n            this.assignClassModal = false;\n            this.newClassShowModal = false;\n            this.editClassShowModal = false;\n            this.newProgrammeShowModal = false;\n            this.ClassListModal = false;\n            this.ViewClassModal = false;\n        },\n        ViewStudentToClass(row) {\n            return [{\n                name: 'View',\n                handler: _ => {\n                    this.assignClassLevelID = row.PK_Course_ID;\n                    this.assignClassID = row.PK_Class_ID;\n                    this.getAssignStudents();\n                    this.$refs.ViewClassModal.show();\n\n                }\n            }];\n        },\n        ViewStudentToClassInner() {\n            const row = this.tempRow;\n            this.assignClassLevelID = row.PK_Course_ID;\n            this.assignClassID = row.PK_Class_ID;\n            this.getAssignStudents();\n            this.$refs.ViewClassModal.show();\n        },\n        returnAssignStudents() {\n            this.$refs.assignClassShowModal.show();\n        },\n        async getAssignStudents() {\n            try {\n                if (this.multipleSelection.length > 0) {\n                    this.$refs.articleTable.clearSelection();\n                }\n\n                this.$vs.loading();\n                const response = await DataSource.shared.getActiveStudentsByLevelSchool(this.assignClassLevelID, this.assignClassID);\n                if (response) {\n                    this.$vs.loading.close();\n                    if (response.code === '88') {\n                        window.location.replace('/');\n                    } else {\n                        // response.Table.forEach(d => {\n                        let assignStudentList = response.Table;\n\n                        this.assignStudentsListInt = assignStudentList.filter(d => {\n                            return d.assignToCurrentClass !== \"YES\";\n                        });\n                        this.currentStudent = assignStudentList.filter(d => {\n                            return d.assignToCurrentClass === \"YES\";\n                        });\n\n                        this.assignStudentsListTotal = this.assignStudentsListInt.length;\n                        this.assignStudentsListCurrentPage = 1;\n                        this.assignStudentsListPageSize = 20;\n\n                        //console.log(\"assignStudentsListInt\", this.assignStudentsListInt);\n\n                        // if (x.assignToCurrentClass !== \"YES\") {\n                        //     this.assignStudentsListInt.push(x);\n                        // }else{\n                        //     this.currentStudent.push(x);\n                        //     console.log(this.currentStudent,\"111\")\n                        // }\n                        // });\n                    }\n                }\n            } catch (e) {\n                this.results = e;\n            }\n        },\n        async assignClass() {\n            let classAssignList = [];\n\n            this.multipleSelection.forEach(item => {\n                let classAssignDetials = {\n                    studentID: item.Student_ID,\n                    classHistoryID: item.PK_Student_Course_ID\n                };\n\n                classAssignList.push(classAssignDetials);\n            });\n\n            const response = await DataSource.shared.massSetClass(this.assignClassID, JSON.stringify(classAssignList));\n            if (response) {\n                if (response.code === '1') {\n                    this.$notify({\n                        title: 'Success',\n                        message: 'Successfully saved',\n                        type: 'success'\n                    });\n                    this.closeAssignModal();\n                    // window.location.replace('/ClassManagement');\n                } else if (response.code === '2') {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'The class have been exceeded max number of student!'\n                    });\n                } else {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Error! Please try again later'\n                    });\n                    window.location.replace('/ClassManagement');\n                }\n            }\n        },\n        createNewProgrmamme(value) {\n            if (value === 'New') {\n                if (this.ddlClassLevel === '' || this.ddlSemester === '' || this.inputClassName === '' || this.inputMaxStudents === '' || this.ddlClassTeacher === '') {\n                    this.$notify.error({\n                        title: 'Error',\n                        message: 'Please fill in all information'\n                    });\n                } else {\n                    this.programmeLevelID = this.ddlClassLevel;\n                    this.programmeSemID = this.ddlSemester;\n                    this.programmeClassName = this.inputClassName;\n                    this.programmeMaxStudent = this.inputMaxStudents;\n                    this.programmeClassTeacher = this.ddlClassTeacher;\n                    this.programmeSaveType = 'NEW CLASS';\n\n                    this.newProgrammeShowModal = true;\n\n                    this.currentClassTypeList = this.classTypeList;\n                }\n            } else if (value === 'Edit') {\n                this.programmeLevelID = this.classListInt[0].CLS_FK_Course_ID;\n                this.programmeSemID = this.classListInt[0].CLS_FK_Semester_ID;\n                this.programmeClassName = this.classListInt[0].CLS_ClassName;\n                this.programmeMaxStudent = this.classListInt[0].CLS_Class_Max_Students;\n                this.programmeClassTeacher = this.classListInt[0].CLS_Class_Incharge_Staff;\n                this.programmeSaveType = 'NEW BATCH ONLY';\n\n                this.newProgrammeShowModal = true;\n\n\n                this.currentClassTypeList = this.classTypeList.filter(d => {\n                    const found = this.currentClassProgs.find(c => {\n                        return d.CTY_ClassType === c;\n                    });\n                    if (!found) {\n                        return d;\n                    }\n                });\n\n            }\n        },\n        editClass() {\n            this.editSemesterID = this.classListSemesterID;\n            this.editCourseID = this.classListCourseID;\n            this.editClassName = this.classListClassName;\n            this.inputEditClassName = this.classListClassName;\n            this.ddlEditClassStatus = 'Active';\n            this.inputEditMaxStudents = this.classListMaxStudents;\n            this.inputeditLevel = this.classListLevelName;\n            this.$refs.editClassShowModal.show();\n        },\n        assignStudentsListChangePage(currentPage){\n            this.assignStudentsListCurrentPage = currentPage;\n        },\n        assignStudentsListChangePageSize (currentPageSize) {\n            this.assignStudentsListPageSize = currentPageSize;\n        },\n    },\n};\n",{"version":3,"sources":["ClassManagement.vue"],"names":[],"mappingsihfile":"ClassManagement.vue","sourceRoot":"src\\pages","sourcesContent":["<template>\r\n    <div id=\"classmanagement\">\r\n        <div class=\"container admin-wrap\">\r\n            <div class=\"row header mb-2\">\r\n                <div class=\"col-lg-5 \">\r\n                    <h3 class=\"text-left mb-3\">Class Management</h3>\r\n                </div>\r\n                <div class=\"col-lg-7 actionDiv\">\r\n                    <el-button-group>\r\n                        <el-button type=\"primary\" v-b-modal.newClassModal variant=\"primary\"><i class=\"material-icons\">\r\n                            playlist_add\r\n                        </i> New Class\r\n                        </el-button>\r\n                        <el-button type=\"primary\" variant=\"primary\" v-on:click=\"directToPromotion()\">Mass Promotion <i\r\n                                class=\"material-icons\">\r\n                            view_module\r\n                        </i></el-button>\r\n                    </el-button-group>\r\n                    <!--<b-btn v-b-modal.newClassModal variant=\"primary\">-->\r\n                    <!--Mass Promotion-->\r\n                    <!--</b-btn>-->\r\n\r\n                    <!--<b-btn variant=\"primary\" v-on:click=\"directToPromotion()\">-->\r\n                    <!--Mass Promotion-->\r\n                    <!--</b-btn>-->\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n                    <el-row style=\"margin-bottom: 10px\">\r\n                        <el-col :span=\"11\">\r\n                            <el-input v-model=\"ClassFilters[0].value\" class=\"search-datatable\" placeholder=\"Search\">\r\n                                <template slot=\"prepend\"><i class=\"material-icons\">\r\n                                    search\r\n                                </i> Search Class Name\r\n                                </template>\r\n                            </el-input>\r\n                        </el-col>\r\n                        <el-col :span=\"11\" :offset=\"2\">\r\n                            <!--<el-select v-model=\"ClassFilters[1].value\" placeholder=\"select type\"-->\r\n                            <!--multiple=\"multiple\" class=\"float-right\">-->\r\n                            <!--<el-option-->\r\n                            <!--v-for=\"item in classListFilteritem\"-->\r\n                            <!--:key=\"item\"-->\r\n                            <!--:label=\"item\"-->\r\n                            <!--:value=\"item\">-->\r\n                            <!--</el-option>-->\r\n                            <!--</el-select>-->\r\n                            <el-popover\r\n                                    placement=\"bottom-end\"\r\n                                    width=\"400\"\r\n                                    trigger=\"click\">\r\n\r\n                                <el-checkbox-group v-model=\"ClassFilters[1].value\" class=\"custom-checkbox\">\r\n                                    <el-checkbox-button v-for=\"item in classListFilteritem\" :label=\"item\"\r\n                                                        :key=\"item\">{{item}}\r\n                                    </el-checkbox-button>\r\n                                </el-checkbox-group>\r\n                                <el-button slot=\"reference\" type=\"primary\" round\r\n                                           class=\"float-right large-btn classManage-filter\"><i\r\n                                        class=\"material-icons\">\r\n                                    tune\r\n                                </i> Filter\r\n                                </el-button>\r\n                            </el-popover>\r\n                        </el-col>\r\n                    </el-row>\r\n                    <data-tables :data=\"parentClassListInt\" :action-col=\"parentClassListAction\"\r\n                                 class=\"classManage-Table\" :filters=\"ClassFilters\">\r\n                        <el-table-column v-for=\"parentClassListIntInfo in parentClassList\"\r\n                                         :prop=\"parentClassListIntInfo.prop\"\r\n                                         :label=\"parentClassListIntInfo.label\" :key=\"parentClassListIntInfo.prop\"\r\n                                         sortable=\"custom\">\r\n                        </el-table-column>\r\n                    </data-tables>\r\n                </div>\r\n            </div>\r\n\r\n            <!--<div class=\"row\">-->\r\n            <!--<div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">-->\r\n            <!--<div v-if=\"classListInt.length>0\">-->\r\n            <!--<el-row style=\"margin-bottom: 10px\">-->\r\n            <!--<el-col :span=\"11\">-->\r\n            <!--<el-input v-model=\"ClassFilters[0].value\" class=\"search-datatable\" placeholder=\"Search\">-->\r\n            <!--<template slot=\"prepend\"><i class=\"material-icons\">-->\r\n            <!--search-->\r\n            <!--</i> Search Class Name-->\r\n            <!--</template>-->\r\n            <!--</el-input>-->\r\n            <!--</el-col>-->\r\n            <!--<el-col :span=\"11\" :offset=\"2\">-->\r\n            <!--&lt;!&ndash;<el-select v-model=\"ClassFilters[1].value\" placeholder=\"select type\"&ndash;&gt;-->\r\n            <!--&lt;!&ndash;multiple=\"multiple\" class=\"float-right\">&ndash;&gt;-->\r\n            <!--&lt;!&ndash;<el-option&ndash;&gt;-->\r\n            <!--&lt;!&ndash;v-for=\"item in classListFilteritem\"&ndash;&gt;-->\r\n            <!--&lt;!&ndash;:key=\"item\"&ndash;&gt;-->\r\n            <!--&lt;!&ndash;:label=\"item\"&ndash;&gt;-->\r\n            <!--&lt;!&ndash;:value=\"item\">&ndash;&gt;-->\r\n            <!--&lt;!&ndash;</el-option>&ndash;&gt;-->\r\n            <!--&lt;!&ndash;</el-select>&ndash;&gt;-->\r\n            <!--<el-popover-->\r\n            <!--placement=\"bottom-end\"-->\r\n            <!--width=\"400\"-->\r\n            <!--trigger=\"click\">-->\r\n\r\n            <!--<el-checkbox-group v-model=\"ClassFilters[1].value\" class=\"custom-checkbox\">-->\r\n            <!--<el-checkbox-button v-for=\"item in classListFilteritem\" :label=\"item\"-->\r\n            <!--:key=\"item\">{{item}}-->\r\n            <!--</el-checkbox-button>-->\r\n            <!--</el-checkbox-group>-->\r\n            <!--<el-button slot=\"reference\" type=\"primary\" round-->\r\n            <!--class=\"float-right large-btn classManage-filter\"><i-->\r\n            <!--class=\"material-icons\">-->\r\n            <!--tune-->\r\n            <!--</i> Filter-->\r\n            <!--</el-button>-->\r\n            <!--</el-popover>-->\r\n            <!--</el-col>-->\r\n            <!--</el-row>-->\r\n            <!--<data-tables :data=\"classListInt\" :action-col=\"classListAction\" class=\"classManage-Table\"-->\r\n            <!--:filters=\"ClassFilters\">-->\r\n            <!--<el-table-column v-for=\"classListInfo in classList\" :prop=\"classListInfo.prop\"-->\r\n            <!--:label=\"classListInfo.label\" :key=\"classListInfo.prop\"-->\r\n            <!--sortable=\"custom\">-->\r\n            <!--</el-table-column>-->\r\n\r\n            <!--<el-table-column label=\"Assign Students\" min-width=\"100px\">-->\r\n            <!--<template slot-scope=\"scope\">-->\r\n            <!--<el-button v-for=\"assignStudents in assignStudentToClass(scope.row)\"-->\r\n            <!--:key=\"assignStudents.name\" type=\"primary\"-->\r\n            <!--@click=\"assignStudents.handler\">-->\r\n            <!--{{assignStudents.name}}-->\r\n            <!--</el-button>-->\r\n            <!--</template>-->\r\n            <!--</el-table-column>-->\r\n            <!--<el-table-column label=\"View Students\" min-width=\"100px\">-->\r\n            <!--<template slot-scope=\"scope\">-->\r\n            <!--<el-button v-for=\"assignStudents in ViewStudentToClass(scope.row)\"-->\r\n            <!--:key=\"assignStudents.name\" type=\"primary\"-->\r\n            <!--@click=\"assignStudents.handler\">-->\r\n            <!--{{assignStudents.name}}-->\r\n            <!--</el-button>-->\r\n            <!--</template>-->\r\n            <!--</el-table-column>-->\r\n            <!--</data-tables>-->\r\n            <!--</div>-->\r\n            <!--</div>-->\r\n            <!--</div>-->\r\n        </div>\r\n\r\n        <b-modal id=\"newClassModal\" size=\"lg\" title=\"Create New Class\" ok-only ok-variant=\"secondary\" hide-footer\r\n                 ref=\"newClassShowModal\" v-model=\"newClassShowModal\">\r\n            <div class=\"row ml-2 mr-2\">\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12 mb-3\">\r\n                    <label>Level</label>\r\n                    <!--<select v-model=\"ddlClassLevel\" class=\"form-control pro-edt-select form-control-primary\">-->\r\n                    <!--<option v-for=\"item in levelList\" v-bind:value=\"item.PK_Course_ID\">-->\r\n                    <!--{{ item.CRS_Course_Name }}-->\r\n                    <!--</option>-->\r\n                    <!--</select>-->\r\n                    <el-select v-model=\"ddlClassLevel\" placeholder=\"Select\" class=\"fullwidth\">\r\n                        <el-option\r\n                                v-for=\"item in levelList\"\r\n                                :key=\"item.PK_Course_ID\"\r\n                                :label=\"item.CRS_Course_Name\"\r\n                                :value=\"item.PK_Course_ID\">\r\n                        </el-option>\r\n                    </el-select>\r\n\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Semester</label>\r\n                    <el-select v-model=\"ddlSemester\" placeholder=\"Select\" class=\"fullwidth\">\r\n                        <el-option\r\n                                v-for=\"item in semesterList\"\r\n                                :key=\"item.PK_Semester_ID\"\r\n                                :label=\"item.SMT_Code\"\r\n                                :value=\"item.PK_Semester_ID\">\r\n                        </el-option>\r\n                    </el-select>\r\n                    <!--<select v-model=\"ddlSemester\" class=\"form-control pro-edt-select form-control-primary\">-->\r\n                    <!--<option v-for=\"item in semesterList\" v-bind:value=\"item.PK_Semester_ID\">-->\r\n                    <!--{{ item.SMT_Code }}-->\r\n                    <!--</option>-->\r\n                    <!--</select>-->\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Class Name</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"inputClassName\">\r\n                </div>\r\n\r\n                <!--<div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">-->\r\n                <!--<label>Programme</label>-->\r\n                <!--<el-select v-model=\"ddlClassType\" placeholder=\"Select\" class=\"fullwidth\">-->\r\n                <!--<el-option-->\r\n                <!--v-for=\"item in classTypeList\"-->\r\n                <!--:key=\"item.CTY_ClassType\"-->\r\n                <!--:label=\"item.CTY_ClassType\"-->\r\n                <!--:value=\"item.CTY_ClassType\">-->\r\n                <!--</el-option>-->\r\n                <!--</el-select>-->\r\n                <!--&lt;!&ndash;<select v-model=\"ddlClassType\" class=\"form-control pro-edt-select form-control-primary\">&ndash;&gt;-->\r\n                <!--&lt;!&ndash;<option v-for=\"item in classTypeList\" v-bind:value=\"item.CTY_ClassType\">&ndash;&gt;-->\r\n                <!--&lt;!&ndash;{{ item.CTY_ClassType }}&ndash;&gt;-->\r\n                <!--&lt;!&ndash;</option>&ndash;&gt;-->\r\n                <!--&lt;!&ndash;</select>&ndash;&gt;-->\r\n                <!--</div>-->\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Class Teacher</label>\r\n                    <el-select v-model=\"ddlClassTeacher\" filterable placeholder=\"Select\" class=\"fullwidth\">\r\n                        <el-option\r\n                                v-for=\"item in classTeacherList\"\r\n                                :key=\"item.CONid\"\r\n                                :label=\"item.CONname\"\r\n                                :value=\"item.CONid\">\r\n                        </el-option>\r\n                    </el-select>\r\n                    <!--<select v-model=\"ddlClassTeacher\" class=\"form-control pro-edt-select form-control-primary\">-->\r\n                    <!--<option v-for=\"item in classTeacherList\" v-bind:value=\"item.CONid\">-->\r\n                    <!--{{ item.CONname }}-->\r\n                    <!--</option>-->\r\n                    <!--</select>-->\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Maximum Student</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"inputMaxStudents\" @keypress=\"onlyNumber\">\r\n                </div>\r\n                <hr class=\"custom-hr\"/>\r\n                <div class=\"col-lg-6\">\r\n                    <button v-on:click=\"closeAssignModal()\"\r\n                            class=\"btn btn-secondary close-modal-btn float-left\">Close\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-lg-6\">\r\n                    <button v-on:click=\"createNewProgrmamme('New')\"\r\n                            class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch\">Next\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n\r\n        <b-modal id=\"editClassModal\" size=\"lg\" title=\"Edit Class\" ok-only ok-variant=\"secondary\"\r\n                 ref=\"editClassShowModal\" hide-footer v-model=\"editClassShowModal\">\r\n            <div class=\"row ml-2 mr-2\">\r\n                <div style=\"display: none;\">{{ editSemesterID }} - {{ editCourseID }} - {{ editClassName }}</div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Level</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"inputeditLevel\" readonly=\"readonly\" disabled>\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Class Name</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"inputEditClassName\">\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Status</label>\r\n                    <el-select v-model=\"ddlEditClassStatus\" filterable placeholder=\"Select\" class=\"fullwidth\">\r\n                        <el-option\r\n                                v-for=\"item in editClassStatusList\"\r\n                                :key=\"item\"\r\n                                :label=\"item\"\r\n                                :value=\"item\">\r\n                        </el-option>\r\n                    </el-select>\r\n                    <!--<select v-model=\"ddlEditClassStatus\" class=\"form-control pro-edt-select form-control-primary\">-->\r\n                    <!--<option v-for=\"item in editClassStatusList\" v-bind:value=\"item\">-->\r\n                    <!--{{ item }}-->\r\n                    <!--</option>-->\r\n                    <!--</select>-->\r\n                </div>\r\n\r\n                <div class=\"col-lg-6 col-md-6 col-sm-6 col-xs-12\">\r\n                    <label>Maximum Student</label>\r\n                    <input type=\"text\" class=\"form-control\" v-model=\"inputEditMaxStudents\" @keypress=\"onlyNumber\">\r\n                </div>\r\n                <hr class=\"custom-hr\"/>\r\n                <div class=\"col-lg-6\">\r\n                    <button @click=\"backtoClassList()\" class=\" btn btn-secondary float-left\">\r\n                        Back\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-lg-6\">\r\n                    <button v-on:click=\"updateClass()\"\r\n                            class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch\">Update\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n\r\n        <b-modal id=\"assignClassModal\" size=\"lg\" title=\"Assign Class\" ok-only ok-variant=\"secondary\" hide-footer\r\n                 ref=\"assignClassShowModal\" v-model=\"assignClassModal\">\r\n            <div class=\"\">\r\n                <div style=\"display: none;\">{{ assignClassLevelID }} - {{ assignClassID }}</div>\r\n\r\n                <div class=\"\">\r\n                    <div v-if=\"assignStudentsListInt.length<1\" class=\"empty-list_image\">\r\n                        <strong>No Record ...</strong>\r\n                        <img src=\"../assets/promotion.jpg\"/>\r\n                    </div>\r\n                    <div v-if=\"assignStudentsListInt.length>0\">\r\n\r\n                        <el-row style=\"margin-bottom: 10px\" class=\"classManage-ActionBar\">\r\n                            <el-col :span=\"16\">\r\n                                <!--<el-input v-model=\"filters[0].value\">-->\r\n                                    <!--<template slot=\"prepend\">Search</template>-->\r\n                                <!--</el-input>-->\r\n                                <el-input v-model=\"assignStudentsListSearchFilter\">\r\n                                    <template slot=\"prepend\">Search</template>\r\n                                </el-input>\r\n                            </el-col>\r\n                            <el-col :span=\"7\" :offset=\"1\">\r\n                                <el-button type=\"primary\" round @click=\"ViewStudentToClassInner()\">View Assigned Student\r\n                                </el-button>\r\n                            </el-col>\r\n                        </el-row>\r\n                        <!--<data-tables :data=\"assignStudentsListInt\" :filters=\"filters\" layout=\"table\"-->\r\n                                     <!--:pagination-props=\"{ background: true, pageSizes: [2, 3, 4] }\"-->\r\n                                     <!--@selection-change=\"changeSelection\" :row-key=\"getRowKey\" ref=\"articleTable\">-->\r\n                            <!--<el-table-column type=\"selection\" width=\"55\" :reserve-selection=\"true\">-->\r\n                            <!--</el-table-column>-->\r\n\r\n                        <!--<el-table :data=\"assignStudentsListInt.filter(data => !assignStudentsListSearchFilter || data.Full_Name.toLowerCase().includes(assignStudentsListSearchFilter.toLowerCase()))\"-->\r\n                                     <!--@selection-change=\"changeSelection\" :row-key=\"getRowKey\" ref=\"articleTable\">-->\r\n                        <el-table :data=\"assignStudentsListInt.filter(data => !assignStudentsListSearchFilter || data.Full_Name.toLowerCase().includes(assignStudentsListSearchFilter.toLowerCase())).slice((assignStudentsListCurrentPage-1)*assignStudentsListPageSize,assignStudentsListCurrentPage*assignStudentsListPageSize)\"\r\n                                  @selection-change=\"changeSelection\" :row-key=\"getRowKey\" ref=\"articleTable\">\r\n                            <el-table-column type=\"selection\" width=\"55\" :reserve-selection=\"true\">\r\n                            </el-table-column>\r\n\r\n                            <el-table-column v-for=\"assignStudentsListInfo in assignStudentsList\"\r\n                                             :prop=\"assignStudentsListInfo.prop\"\r\n                                             :label=\"assignStudentsListInfo.label\" :key=\"assignStudentsListInfo.prop\"\r\n                                             sortable=\"custom\">\r\n                            </el-table-column>\r\n                        </el-table>\r\n\r\n                        <el-pagination\r\n                            @current-change=\"assignStudentsListChangePage\"\r\n                            @size-change=\"assignStudentsListChangePageSize\"\r\n                            :page-sizes=\"[20, 40, 60, 80]\"\r\n                            :page-size=assignStudentsListPageSize\r\n                            layout=\"total, sizes, prev, pager, next, jumper\"\r\n                            :total=\"assignStudentsListTotal\">\r\n                        </el-pagination>\r\n                    </div>\r\n                </div>\r\n                <hr class=\"custom-hr\"/>\r\n                <div class=\"row\">\r\n                    <div class=\"col-lg-6\">\r\n                        <button v-on:click=\"backtoClassList()\"\r\n                                class=\"btn btn-secondary close-modal-btn float-left\">Back\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"col-lg-6\">\r\n                        <button v-on:click=\"assignClass()\"\r\n                                class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch float-right\" :disabled=\"assignStudentsListInt.length<1\">\r\n                            Assign\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n\r\n        <b-modal id=\"ViewClassModal\" size=\"lg\" title=\"Assign Class\" ok-only ok-variant=\"secondary\"\r\n                 ref=\"ViewClassModal\" ok-title=\"Close\" hide-footer v-model=\"ViewClassModal\">\r\n            <div class=\"\">\r\n                <div style=\"display: none;\">{{ assignClassLevelID }} - {{ assignClassID }}</div>\r\n\r\n                <div v-if=\"currentStudent.length<1\" class=\"empty-list_image\">\r\n                    <strong>No Record ...</strong>\r\n                    <img src=\"../assets/promotion.jpg\"/>\r\n                </div>\r\n                <div class=\"\">\r\n                    <div>\r\n                        <data-tables :data=\"currentStudent\" v-if=\"currentStudent.length>0\">\r\n\r\n                            <el-table-column v-for=\"studentList in currentStudentList\"\r\n                                             :prop=\"studentList.prop\"\r\n                                             :label=\"studentList.label\" :key=\"studentList.prop\"\r\n                                             sortable=\"custom\">\r\n                            </el-table-column>\r\n                        </data-tables>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <hr class=\"custom-hr\"/>\r\n            <div class=\"row \">\r\n                <div class=\"col-lg-6\">\r\n                    <button @click=\"closeAssignModal\"\r\n                            class=\"btn btn-secondary waves-effect waves-light m-r-10 btnFamilyIDSearch float-left\">\r\n                        Close\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-lg-6\">\r\n                    <button @click=\"returnAssignStudents\"\r\n                            class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch float-right\">\r\n                        Assign Student\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n\r\n        <b-modal id=\"ClassListModal\" size=\"lg\" title=\"Class List\" ok-only ok-variant=\"secondary\" hide-footer\r\n                 ref=\"classListShowModal\" v-model=\"ClassListModal\">\r\n            <div class=\"row ml-2 mr-2\">\r\n                <div style=\"display: none;\">{{ classListSemesterID }} - {{ classListCourseID }} - {{ classListClassName\r\n                    }} - {{ classListLevelName }} - {{ classListMaxStudents }}\r\n                </div>\r\n\r\n                <div class=\"col-lg-12 col-md-12 col-sm-12 col-xs-12\">\r\n\r\n                    <el-button-group class=\" \">\r\n                        <el-button type=\"primary\" v-on:click=\"editClass()\" variant=\"primary\"><i class=\"material-icons\">\r\n                            edit\r\n                        </i> Edit Class\r\n                        </el-button>\r\n                        <el-button type=\"primary\" v-on:click=\"createNewProgrmamme('Edit')\" variant=\"primary\"><i\r\n                                class=\"material-icons\">\r\n                            note_add\r\n                        </i> Create New\r\n                            Programme\r\n                        </el-button>\r\n                    </el-button-group>\r\n\r\n                    <div v-if=\"classListInt.length>0\">\r\n\r\n                        <data-tables :data=\"classListInt\" class=\"classManage-Table\"\r\n                                     :filters=\"ClassFilters\">\r\n                            <el-table-column v-for=\"classListInfo in classList\" :prop=\"classListInfo.prop\"\r\n                                             :label=\"classListInfo.label\" :key=\"classListInfo.prop\"\r\n                                             sortable=\"custom\">\r\n                            </el-table-column>\r\n\r\n                            <el-table-column label=\"Assign Students\" min-width=\"100px\">\r\n                                <template slot-scope=\"scope\">\r\n                                    <el-button v-for=\"assignStudents in assignStudentToClass(scope.row)\"\r\n                                               :key=\"assignStudents.name\" type=\"primary\"\r\n                                               @click=\"assignStudents.handler\">\r\n                                        {{assignStudents.name}}\r\n                                    </el-button>\r\n                                </template>\r\n                            </el-table-column>\r\n                            <el-table-column label=\"View Students\" min-width=\"100px\">\r\n                                <template slot-scope=\"scope\">\r\n                                    <el-button v-for=\"assignStudents in ViewStudentToClass(scope.row)\"\r\n                                               :key=\"assignStudents.name\" type=\"primary\"\r\n                                               @click=\"assignStudents.handler\">\r\n                                        {{assignStudents.name}}\r\n                                    </el-button>\r\n                                </template>\r\n                            </el-table-column>\r\n                        </data-tables>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr class=\"custom-hr\"/>\r\n                <div class=\"col-lg-6\">\r\n                    <button v-on:click=\"closeAssignModal()\"\r\n                            class=\"btn btn-secondary close-modal-btn float-left\">Close\r\n                    </button>\r\n                </div>\r\n                <!--<div class=\"col-lg-6\">-->\r\n                <!--<button v-on:click=\"editClass()\"-->\r\n                <!--class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch\">Edit Class-->\r\n                <!--</button>-->\r\n\r\n                <!--<button v-on:click=\"createNewProgrmamme('Edit')\"-->\r\n                <!--class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch\">Create New-->\r\n                <!--Programme-->\r\n                <!--</button>-->\r\n                <!--</div>-->\r\n            </div>\r\n        </b-modal>\r\n\r\n        <b-modal id=\"newProgrammeModal\" size=\"lg\" title=\"Create New Programme\" ok-only ok-variant=\"secondary\"\r\n                 hide-footer\r\n                 ref=\"newProgrammeShowModal\" v-model=\"newProgrammeShowModal\">\r\n            <div class=\"row ml-2 mr-2\">\r\n                <div style=\"display: none;\">{{ programmeLevelID }} - {{ programmeSemID }} - {{ programmeClassName }} -\r\n                    {{ programmeMaxStudent }} - {{ programmeClassTeacher }} - {{ programmeSaveType }}\r\n                </div>\r\n\r\n                <div class=\"col-lg-12\" v-if=\"currentClassTypeList.length > 0\">\r\n                    <label>Programme</label>\r\n                </div>\r\n                <div class=\"col-lg-6\">\r\n                    <el-select v-model=\"ddlClassType\" placeholder=\"Select\" class=\"fullwidth\"\r\n                               v-if=\"currentClassTypeList.length > 0\">\r\n                        <el-option\r\n                                v-for=\"item in currentClassTypeList\"\r\n                                :key=\"item.CTY_ClassType\"\r\n                                :label=\"item.CTY_ClassType\"\r\n                                :value=\"item.CTY_ClassType\"\r\n                                :disabled=\"item.disabled===true\">\r\n                        </el-option>\r\n                    </el-select>\r\n                </div>\r\n                <div class=\"col-lg-12\">\r\n                    <div v-if=\"currentClassTypeList.length<1\" class=\"empty-list_image\">\r\n                        <strong class=\"text-center\">All Programme has been created.</strong>\r\n                        <img src=\"../assets/promotion.jpg\"/>\r\n                    </div>\r\n                </div>\r\n\r\n                <hr class=\"custom-hr\"/>\r\n                <div class=\"col-lg-6\">\r\n                    <button v-on:click=\"backtoClassList()\"\r\n                            class=\"btn btn-secondary close-modal-btn float-left\" v-if=\"showbackBtn === true\">Back\r\n                    </button>\r\n                </div>\r\n                <div class=\"col-lg-6\">\r\n                    <button v-on:click=\"saveClass()\"\r\n                            class=\"btn btn-primary waves-effect waves-light m-r-10 btnFamilyIDSearch\"\r\n                            :disabled=\"currentClassTypeList < 1\">Create\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </b-modal>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import DataSource from \"../data/datasource\";\r\n\r\n    export default {\r\n        name: \"ClassManagement\",\r\n        async created() {\r\n            //await this.getClass();\r\n            await this.getParentClassList();\r\n            await this.getLevel();\r\n            await this.getAcademicYear();\r\n            await this.getClassType();\r\n            await this.getClassTeacher();\r\n        },\r\n        data() {\r\n            return {\r\n                currentClassProgs: [],\r\n                assignClassModal: false,\r\n                newClassShowModal: false,\r\n                editClassShowModal: false,\r\n                newProgrammeShowModal: false,\r\n                ClassListModal: false,\r\n                ViewClassModal: false,\r\n                showbackBtn: false,\r\n                ddlClassLevel: '',\r\n                ddlSemester: '',\r\n                inputClassName: '',\r\n                ddlClassType: '',\r\n                ddlClassTeacher: '',\r\n                inputMaxStudents: '',\r\n                ddlEditClassStatus: '',\r\n                inputEditClassName: '',\r\n                inputEditMaxStudents: '',\r\n                inputeditLevel: '',\r\n                assignClassLevelID: '',\r\n                assignClassID: '',\r\n                classListSemesterID: '',\r\n                classListCourseID: '',\r\n                classListClassName: '',\r\n                classListLevelName: '',\r\n                classListMaxStudents: '',\r\n                programmeLevelID: '',\r\n                programmeSemID: '',\r\n                programmeClassName: '',\r\n                programmeMaxStudent: '',\r\n                programmeClassTeacher: '',\r\n                programmeSaveType: '',\r\n                editSemesterID: '',\r\n                editCourseID: '',\r\n                editClassName: '',\r\n                assignStudentsListSearchFilter: '',\r\n\r\n                levelList: [],\r\n                semesterList: [],\r\n                classTypeList: [],\r\n                currentClassTypeList: [],\r\n                classTeacherList: [],\r\n                classListInt: [],\r\n                classListFilteritem: [],\r\n                editClassStatusList: ['Active', 'Closed'],\r\n                assignStudentsListInt: [],\r\n\r\n\r\n                classList: [{\r\n                    prop: \"CLS_ClassName\",\r\n                    label: \"Class Name\"\r\n                }, {\r\n                    prop: \"CLS_Batch\",\r\n                    label: \"Programme\"\r\n                }, {\r\n                    prop: \"CLS_Class_Max_Students\",\r\n                    label: \"Max Students\"\r\n                }, {\r\n                    prop: \"CRS_Course_Name\",\r\n                    label: \"Level\"\r\n                }],\r\n                // classListAction: {\r\n                //     label: 'Edit',\r\n                //     props: {\r\n                //         align: 'center',\r\n                //     },\r\n                //     buttons: [{\r\n                //         props: {\r\n                //             type: 'primary',\r\n                //             icon: 'el-icon-edit'\r\n                //         },\r\n                //         handler: row => {\r\n                //             this.inputEditClassName = row.CLS_ClassName;\r\n                //             this.ddlEditClassStatus = 'Active';\r\n                //             this.inputEditMaxStudents = row.CLS_Class_Max_Students;\r\n                //             this.inputeditLevel = row.CRS_Course_Name;\r\n                //             this.$refs.editClassShowModal.show();\r\n                //         },\r\n                //         label: 'Edit'\r\n                //     }]\r\n                // },\r\n\r\n\r\n                multipleSelection: [],\r\n                assignStudentsListCurrentPage: 1,\r\n                assignStudentsListPageSize: 20,\r\n                assignStudentsListTotal: 0,\r\n                assignStudentsList: [{\r\n                    prop: \"Index_No\",\r\n                    label: \"Student ID\"\r\n                }, {\r\n                    prop: \"Full_Name\",\r\n                    label: \"First Name\"\r\n                }, {\r\n                    prop: \"Middle_name\",\r\n                    label: \"Middle Name\"\r\n                }, {\r\n                    prop: \"Last_name\",\r\n                    label: \"Last Name\"\r\n                },\r\n                    //     {\r\n                    //     prop: \"assignToCurrentClass\",\r\n                    //     label: \"Assigned Current Class\"\r\n                    // }\r\n                ],\r\n                ClassFilters: [\r\n                    {\r\n                        value: '',\r\n                        prop: 'CLS_ClassName',\r\n                    },\r\n                    {\r\n                        value: [],\r\n                        prop: 'CRS_Course_Name'\r\n                    }],\r\n                // filters: [{\r\n                //     value: '',\r\n                //     prop: 'Full_Name',\r\n                // }],\r\n\r\n\r\n                currentStudent: [],\r\n                currentStudentList: [{\r\n                    prop: \"Index_No\",\r\n                    label: \"Student ID\"\r\n                }, {\r\n                    prop: \"Full_Name\",\r\n                    label: \"First Name\"\r\n                }, {\r\n                    prop: \"Middle_name\",\r\n                    label: \"Middle Name\"\r\n                }, {\r\n                    prop: \"Last_name\",\r\n                    label: \"Last Name\"\r\n                }],\r\n                tempRow: \"\",\r\n\r\n\r\n                parentClassListInt: [],\r\n                parentClassList: [{\r\n                    prop: \"CLS_ClassName\",\r\n                    label: \"Class Name\"\r\n                }, {\r\n                    prop: \"Average_MaxStudents\",\r\n                    label: \"Max Students\"\r\n                }, {\r\n                    prop: \"CRS_Course_Name\",\r\n                    label: \"Level\"\r\n                }, {\r\n                    prop: \"SMT_Year\",\r\n                    label: \"Year\"\r\n                }],\r\n                parentClassListAction: {\r\n                    label: 'Edit',\r\n                    props: {\r\n                        align: 'center',\r\n                    },\r\n                    buttons: [{\r\n                        props: {\r\n                            type: 'primary',\r\n                            icon: 'el-icon-edit'\r\n                        },\r\n                        handler: row => {\r\n                            this.classListSemesterID = row.CLS_FK_Semester_ID;\r\n                            this.classListCourseID = row.CLS_FK_Course_ID;\r\n                            this.classListClassName = row.CLS_ClassName;\r\n                            this.classListLevelName = row.CRS_Course_Name;\r\n                            this.classListMaxStudents = row.Average_MaxStudents;\r\n                            this.getClass();\r\n                            this.$refs.classListShowModal.show();\r\n                            this.showbackBtn = true;\r\n                        },\r\n                        label: 'Edit'\r\n                    }]\r\n                },\r\n            };\r\n        },\r\n        methods: {\r\n            getRowKey(row) {\r\n                return row.Student_ID;\r\n            },\r\n            changeSelection(val) {\r\n                this.multipleSelection = val;\r\n            },\r\n            backtoClassList() {\r\n                this.$refs.classListShowModal.show();\r\n            },\r\n            async getParentClassList() {\r\n                try {\r\n                    const response = await DataSource.shared.getParentClassList('', 'GET CLASS LIST GROUP BY LEVEL, SEMESTER, SCHOOL AND CLASS NAME');\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else if (response.code === '99') {\r\n                            console.log('Error! getParentClassList');\r\n                        } else {\r\n                            this.parentClassListInt = response.Table;\r\n                            this.parentClassListInt.forEach(object => {\r\n                                const foundLevel = this.classListFilteritem.find(d => d === object.CRS_Course_Name);\r\n                                if (!foundLevel) {\r\n                                    this.classListFilteritem.push(object.CRS_Course_Name);\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async getClass() {\r\n                try {\r\n                    const response = await DataSource.shared.getClass('');\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.classListInt = response.Table;\r\n                            // this.classListInt.forEach(object => {\r\n                            //     const found = this.classListFilteritem.find(d => d === object.CLS_Batch);\r\n                            //     if (!found) {\r\n                            //         this.classListFilteritem.push(object.CLS_Batch);\r\n                            //     }\r\n                            //     const foundLevel = this.classListFilteritem.find(d => d === object.CRS_Course_Name);\r\n                            //     if (!foundLevel) {\r\n                            //         this.classListFilteritem.push(object.CRS_Course_Name);\r\n                            //     }\r\n                            // });\r\n\r\n\r\n                            let classListList = response.Table;\r\n                            this.classListInt = classListList.filter(d => {\r\n                                return d.CLS_FK_Semester_ID === this.classListSemesterID && d.CLS_FK_Course_ID === this.classListCourseID && d.CLS_ClassName === this.classListClassName;\r\n                            });\r\n\r\n\r\n                            this.currentClassProgs = this.classListInt.map(d => d.CLS_Batch);\r\n\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async getLevel() {\r\n                try {\r\n                    const response = await DataSource.shared.getLevel('');\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.levelList = response.Table;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async getAcademicYear() {\r\n                try {\r\n                    const response = await DataSource.shared.getAcademicYear('');\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.semesterList = response.Table;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async getClassType() {\r\n                try {\r\n                    const response = await DataSource.shared.getClassType('');\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.classTypeList = response.Table;\r\n                            //\r\n                            // this.classTypeList = this.classTypeList.filter(d => d.ID !== fileId);\r\n                            //\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async getClassTeacher() {\r\n                try {\r\n                    const response = await DataSource.shared.getTeacherListBySchool();\r\n                    if (response) {\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            this.classTeacherList = response.Table;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            onlyNumber($event) {\r\n                //console.log($event.keyCode); //keyCodes value\r\n                let keyCode = ($event.keyCode ? $event.keyCode : $event.which);\r\n                //if ((keyCode < 48 || keyCode > 57) && keyCode !== 46) { // 46 is dot\r\n                if (keyCode < 48 || keyCode > 57) { // 46 is dot\r\n                    $event.preventDefault();\r\n                }\r\n            },\r\n            async saveClass() {\r\n                try {\r\n                    if (this.programmeLevelID === '' || this.programmeSemID === '' || this.ddlClassType === '' || this.programmeClassName === '' || this.programmeMaxStudent === '' || this.programmeClassTeacher === '' || this.programmeSaveType === '') {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Please fill in all information'\r\n                        });\r\n                    } else {\r\n                        const response = await DataSource.shared.saveClass(this.programmeLevelID, this.programmeSemID, this.ddlClassType, this.programmeClassName, this.programmeMaxStudent, this.programmeClassTeacher, this.programmeSaveType);\r\n                        if (response) {\r\n                            if (response.code === '88') {\r\n                                window.location.replace('/');\r\n                            } else if (response.code === '99') {\r\n                                this.$notify.error({\r\n                                    title: 'Error',\r\n                                    message: 'Save Class Error!'\r\n                                });\r\n                            } else if (response.code === '2') {\r\n                                this.$notify.error({\r\n                                    title: 'Duplicated',\r\n                                    message: 'Duplicated Class with programme!'\r\n                                });\r\n                            } else {\r\n                                this.$notify({\r\n                                    title: 'Success',\r\n                                    message: 'Successfully Saved!',\r\n                                    type: 'success'\r\n                                });\r\n                                window.location.replace('/ClassManagement');\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async updateClass() {\r\n                try {\r\n                    if (this.editSemesterID === '' || this.editCourseID === '' || this.editClassName === '') {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Please close and open again'\r\n                        });\r\n                    } else if (this.inputEditClassName === '' || this.ddlEditClassStatus === '' || this.inputEditMaxStudents === '') {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Please fill in all information'\r\n                        });\r\n                    } else {\r\n                        const response = await DataSource.shared.updateClass(this.ddlEditClassStatus, this.inputEditClassName, this.inputEditMaxStudents, this.editClassName, this.editCourseID, this.editSemesterID);\r\n                        if (response) {\r\n                            if (response.code === '88') {\r\n                                window.location.replace('/');\r\n                            } else if (response.code === '99') {\r\n                                this.$notify.error({\r\n                                    title: 'Error',\r\n                                    message: 'Edit Class Error!'\r\n                                });\r\n                            } else {\r\n                                this.$notify({\r\n                                    title: 'Success',\r\n                                    message: 'Successfully Edited!',\r\n                                    type: 'success'\r\n                                });\r\n                                this.getParentClassList();\r\n                                this.closeAssignModal();\r\n                            }\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            directToPromotion() {\r\n                window.location.replace('/Promotion');\r\n            },\r\n            assignStudentToClass(row) {\r\n                return [{\r\n                    name: 'Assign',\r\n                    handler: _ => {\r\n                        this.assignClassLevelID = row.PK_Course_ID;\r\n                        this.assignClassID = row.PK_Class_ID;\r\n                        this.getAssignStudents();\r\n                        // this.$refs.assignClassShowModal.show();\r\n                        this.assignClassModal = true;\r\n                        this.tempRow = row;\r\n                    }\r\n                }];\r\n            },\r\n            closeAssignModal() {\r\n                this.assignClassModal = false;\r\n                this.newClassShowModal = false;\r\n                this.editClassShowModal = false;\r\n                this.newProgrammeShowModal = false;\r\n                this.ClassListModal = false;\r\n                this.ViewClassModal = false;\r\n            },\r\n            ViewStudentToClass(row) {\r\n                return [{\r\n                    name: 'View',\r\n                    handler: _ => {\r\n                        this.assignClassLevelID = row.PK_Course_ID;\r\n                        this.assignClassID = row.PK_Class_ID;\r\n                        this.getAssignStudents();\r\n                        this.$refs.ViewClassModal.show();\r\n\r\n                    }\r\n                }];\r\n            },\r\n            ViewStudentToClassInner() {\r\n                const row = this.tempRow;\r\n                this.assignClassLevelID = row.PK_Course_ID;\r\n                this.assignClassID = row.PK_Class_ID;\r\n                this.getAssignStudents();\r\n                this.$refs.ViewClassModal.show();\r\n            },\r\n            returnAssignStudents() {\r\n                this.$refs.assignClassShowModal.show();\r\n            },\r\n            async getAssignStudents() {\r\n                try {\r\n                    if (this.multipleSelection.length > 0) {\r\n                        this.$refs.articleTable.clearSelection();\r\n                    }\r\n\r\n                    this.$vs.loading();\r\n                    const response = await DataSource.shared.getActiveStudentsByLevelSchool(this.assignClassLevelID, this.assignClassID);\r\n                    if (response) {\r\n                        this.$vs.loading.close();\r\n                        if (response.code === '88') {\r\n                            window.location.replace('/');\r\n                        } else {\r\n                            // response.Table.forEach(d => {\r\n                            let assignStudentList = response.Table;\r\n\r\n                            this.assignStudentsListInt = assignStudentList.filter(d => {\r\n                                return d.assignToCurrentClass !== \"YES\";\r\n                            });\r\n                            this.currentStudent = assignStudentList.filter(d => {\r\n                                return d.assignToCurrentClass === \"YES\";\r\n                            });\r\n\r\n                            this.assignStudentsListTotal = this.assignStudentsListInt.length;\r\n                            this.assignStudentsListCurrentPage = 1;\r\n                            this.assignStudentsListPageSize = 20;\r\n\r\n                            //console.log(\"assignStudentsListInt\", this.assignStudentsListInt);\r\n\r\n                            // if (x.assignToCurrentClass !== \"YES\") {\r\n                            //     this.assignStudentsListInt.push(x);\r\n                            // }else{\r\n                            //     this.currentStudent.push(x);\r\n                            //     console.log(this.currentStudent,\"111\")\r\n                            // }\r\n                            // });\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    this.results = e;\r\n                }\r\n            },\r\n            async assignClass() {\r\n                let classAssignList = [];\r\n\r\n                this.multipleSelection.forEach(item => {\r\n                    let classAssignDetials = {\r\n                        studentID: item.Student_ID,\r\n                        classHistoryID: item.PK_Student_Course_ID\r\n                    };\r\n\r\n                    classAssignList.push(classAssignDetials);\r\n                });\r\n\r\n                const response = await DataSource.shared.massSetClass(this.assignClassID, JSON.stringify(classAssignList));\r\n                if (response) {\r\n                    if (response.code === '1') {\r\n                        this.$notify({\r\n                            title: 'Success',\r\n                            message: 'Successfully saved',\r\n                            type: 'success'\r\n                        });\r\n                        this.closeAssignModal();\r\n                        // window.location.replace('/ClassManagement');\r\n                    } else if (response.code === '2') {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'The class have been exceeded max number of student!'\r\n                        });\r\n                    } else {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Error! Please try again later'\r\n                        });\r\n                        window.location.replace('/ClassManagement');\r\n                    }\r\n                }\r\n            },\r\n            createNewProgrmamme(value) {\r\n                if (value === 'New') {\r\n                    if (this.ddlClassLevel === '' || this.ddlSemester === '' || this.inputClassName === '' || this.inputMaxStudents === '' || this.ddlClassTeacher === '') {\r\n                        this.$notify.error({\r\n                            title: 'Error',\r\n                            message: 'Please fill in all information'\r\n                        });\r\n                    } else {\r\n                        this.programmeLevelID = this.ddlClassLevel;\r\n                        this.programmeSemID = this.ddlSemester;\r\n                        this.programmeClassName = this.inputClassName;\r\n                        this.programmeMaxStudent = this.inputMaxStudents;\r\n                        this.programmeClassTeacher = this.ddlClassTeacher;\r\n                        this.programmeSaveType = 'NEW CLASS';\r\n\r\n                        this.newProgrammeShowModal = true;\r\n\r\n                        this.currentClassTypeList = this.classTypeList;\r\n                    }\r\n                } else if (value === 'Edit') {\r\n                    this.programmeLevelID = this.classListInt[0].CLS_FK_Course_ID;\r\n                    this.programmeSemID = this.classListInt[0].CLS_FK_Semester_ID;\r\n                    this.programmeClassName = this.classListInt[0].CLS_ClassName;\r\n                    this.programmeMaxStudent = this.classListInt[0].CLS_Class_Max_Students;\r\n                    this.programmeClassTeacher = this.classListInt[0].CLS_Class_Incharge_Staff;\r\n                    this.programmeSaveType = 'NEW BATCH ONLY';\r\n\r\n                    this.newProgrammeShowModal = true;\r\n\r\n\r\n                    this.currentClassTypeList = this.classTypeList.filter(d => {\r\n                        const found = this.currentClassProgs.find(c => {\r\n                            return d.CTY_ClassType === c;\r\n                        });\r\n                        if (!found) {\r\n                            return d;\r\n                        }\r\n                    });\r\n\r\n                }\r\n            },\r\n            editClass() {\r\n                this.editSemesterID = this.classListSemesterID;\r\n                this.editCourseID = this.classListCourseID;\r\n                this.editClassName = this.classListClassName;\r\n                this.inputEditClassName = this.classListClassName;\r\n                this.ddlEditClassStatus = 'Active';\r\n                this.inputEditMaxStudents = this.classListMaxStudents;\r\n                this.inputeditLevel = this.classListLevelName;\r\n                this.$refs.editClassShowModal.show();\r\n            },\r\n            assignStudentsListChangePage(currentPage){\r\n                this.assignStudentsListCurrentPage = currentPage;\r\n            },\r\n            assignStudentsListChangePageSize (currentPageSize) {\r\n                this.assignStudentsListPageSize = currentPageSize;\r\n            },\r\n        },\r\n    };\r\n</script>\r\n\r\n<style scoped>\r\n    .actionDiv {\r\n        text-align: right;\r\n    }\r\n\r\n    .actionDiv .btn-primary {\r\n        display: inline;\r\n        margin-left: 10px;\r\n    }\r\n</style>"]}]}